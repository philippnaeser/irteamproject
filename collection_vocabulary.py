class Collection:    '''    We want to present the document collection in the following way:    - it's an instance of the Collection class    - it has an attribute collection that is a  dictionary    - the dictionary's keys are the doc-IDs    - the corresponding values are the document contents represented as a list of strings    - the vocabulary is an attribute of the collection, as well as the vocabulary's properties, and other summary stats    - it is represented as an ordered tuple that contains each word exactly once, is generated from a list of strings    '''    def __init__(self):        self.collection= {}        self.collection_size= 0        self.collection_length= 0        self.vocabulary = set() # since set can be easily be updated; but will be converted to list when sorting        self.vocabulary_size= 0        self.generate_collection()    def generate_collection(self):        '''        The index and vocabulary are created from the medical documents data (*.docs  files).        Each medical document is already pre-processed and represented as a BoW. Words are being lowercased, and stopwords have been removed.        The 'raw' folder contains raw queries and documents, as well as an specification of stopwords being removed.        The Collection and Vocabulary are being created by looping once through the data.        '''        with open('nfcorpus/train.docs', 'r') as rf1:            with open('nfcorpus/dev.docs', 'r') as rf2:                with open('nfcorpus/test.docs', 'r') as rf3:                    for i in [rf1, rf2, rf3]:                        for line in i:                            l = line.split('\t')                            l[1] = l[1].strip('\n ').split() # since we want document represented as a list of strings or rstrip()                            if l[0] not in self.collection.keys():                                self.collection[l[0]] = l[1]                                for word in l[1]:                                    self.vocabulary.add(word)                                    self.collection_length+=1        self.collection_size=len(self.collection)        self.vocabulary=sorted(self.vocabulary)        self.vocabulary_size=len(self.vocabulary)    def get_collection_size(self):        return self.collection_size    def get_collection_length(self):  # |N| = 531162        return self.collection_length    def get_vocabulary(self):        return self.vocabulary    def get_vocabulary_size(self): # |V|= 29052        return self.vocabulary_sizedef main():    a=Collection()    print(a.get_collection_size()) #3633    print(a.get_vocabulary_size()) # 29052    print(a.get_collection_length())    print(len(a.collection))    print(type(a.collection))    print(type((a.collection['MED-10'])))    print(len((a.collection['MED-10'])))    #print(a.collection.items())    #print(a.vocabulary)if __name__ == "__main__":    main()